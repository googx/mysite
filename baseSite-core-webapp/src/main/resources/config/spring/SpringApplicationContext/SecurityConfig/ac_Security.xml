<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security-4.0.xsd
	 
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

    <!-- 静态资源文件全部放行 -->
    <http pattern="/resource/**" security="none"/>
    <http pattern="/login.jsp" security="none"/>
    <http pattern="/love/**" security="none"/>
    <http pattern="/weixin/acceptServer" security="none"/>
    <http pattern="/websocket/test/**" security="none"/>
    <http pattern="/updateCookie.action" security="none"/>
    <!-- 未登录的切入点,引导用户进行登录,自动将登录页面显示 -->
    <beans:bean id="authenticationProcessingFilterEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:constructor-arg>
            <beans:value>/login.jsp</beans:value>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="accessDeniedHandler" class="com.thesunboy.site.core.security.Accredit.AccessDeniedHandlerImpl"></beans:bean>

    <http auto-config="false" use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint">

        <access-denied-handler ref="accessDeniedHandler"/>
        <csrf disabled="true"/>
        <!-- 请求拦截链第一个权限检查拦截器,保证最低的权限要求是用户已认证 -->
        <intercept-url pattern="/**" access="isAuthenticated()"/>


        <!-- 	   <expression-handler ref="webSecurityExpressionHandler" />  -->
        <!-- 配置使用position属性标识这个filter是用来替换springSecurity内部过滤器链中预先实现的Filter -->
        <!-- 认证过滤器  -->

        <!-- 对匿名用户的设置,这里把它暂时关闭掉,此处可以设置匿名用户使用的角色对象 -->
        <anonymous enabled="false"/>


        <custom-filter ref="authenticationFilter" position="FORM_LOGIN_FILTER"/>

        <!-- url访问权限过滤拦截器, -->
        <!-- 注意这里一定要是after,自定义的权限检查过滤器必须在spring安全检查之后进行,否则<intercept-url pattern="/**" access="isAuthenticated" >将没有意义 -->
        <custom-filter ref="urlAccessFilter" after="FILTER_SECURITY_INTERCEPTOR"/>

        <custom-filter ref="remberMeFilter" position="REMEMBER_ME_FILTER"/>


        <!-- <logout logout-url="/j_spring_security_logout"
            logout-success-url="/view/login.jsp" delete-cookies="JSESSIONID" /> -->

    </http>


    <beans:bean id="adminUserLoginService" class="com.thesunboy.site.core.system.Services.Impl.AdminUserLoginServiceImpl"></beans:bean>

    <beans:bean id="tokenRememberMeService" class="com.thesunboy.site.core.security.remember.TokenBasedRememberMeServices">
        <beans:constructor-arg>
            <beans:value>CookieSecurityKey</beans:value>
        </beans:constructor-arg>
        <beans:constructor-arg>
            <beans:ref bean="adminUserLoginService"/>
        </beans:constructor-arg>
        <beans:property name="parameter">
            <beans:value>isNeedRem</beans:value>
        </beans:property><!-- 设置前端请求时带的一个参数,这个意思是用户勾选了是否记住我的那个选框,后期使用配置模块进行动态设置,包括是否默认记住 alaws的那个变量  -->
    </beans:bean>


    <beans:bean id="remberMeFilter" class="com.thesunboy.site.core.security.remember.MyRemberMeFilter">
        <beans:constructor-arg>
            <beans:ref bean="authenticationManager"/>
        </beans:constructor-arg>
        <beans:constructor-arg>
            <beans:ref bean="tokenRememberMeService"/>
        </beans:constructor-arg>
    </beans:bean>


    <!-- 配置form-login项可以改变spring的表单默认设置 login-processing-url=""//处理登录请求的url
        username-parameter=""表单提交时的用户名参数名 password-parameter="" 表单提交时的密码参数名 -->

    <!-- <http auto-config="true"> <intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"
        /> <form-login login-page="/login.jsp" authentication-failure-url="/login.jsp"
        default-target-url="/index.jsp" /> </http> -->
    <!--
            不在使用这个类,该由自定义的Service类,同时让该service类也继承于userdetailservice接口
           <beans:bean id="adminUserDetailsSecurityService" class="com.thesunboy.site.core.security.Certification.AdminUserDetailsSecurityService"></beans:bean>
        -->
    <beans:bean id="adminAuthenticationFromDBProvider" class="com.thesunboy.site.core.security.Certification.AdminAuthenticationFromDBProvider">
        <!-- <beans:property name="adminUserDetailsSecurityService" ref="adminUserDetailsSecurityService"/> -->
    </beans:bean>

    <!-- 认证管理器,由多个认证提供者组成,共同进行系统的用户认证  -->
    <authentication-manager id="authenticationManager" erase-credentials="false">
        <!-- 可以配置多个提供者用于提供用户的认证,认证中查不到用户的应该返回null,其余抛异常,具体详细信息参见ProviderManager源码  -->
        <authentication-provider ref="adminAuthenticationFromDBProvider"/>
    </authentication-manager>


    <!-- 用户访问资源的权限决策器,用于负责控制用户访问的资源的权限鉴定,是登录之后的 -->
    <beans:bean id="myAccessDecisionManager" class="com.thesunboy.site.core.security.Accredit.MyAccessDecisionManager">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="com.thesunboy.site.core.security.Accredit.MyRoleVoter"/><!-- 角色表决器 -->
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>


    <!-- 认证成功后置处理器,配置了该处理器后,在form-login节点中配置的default-target-url将不起作用了,因为这个是专门的处理器,替代了原先的那个作用 -->
    <beans:bean id="myAuthenticationSuccessHandler"
                class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <beans:property name="alwaysUseDefaultTargetUrl" value="true"/>
        <!-- targetUrlParameter 通过此参数可以设置从request中取得验证前的url, -->
        <beans:property name="defaultTargetUrl" value="/index"/>
        <!-- <beans:property name="defaultTargetUrl" value="/index.jsp" /> -->
    </beans:bean>

    <!-- 认证失败处理器 -->
    <beans:bean id="myAuthenticationFailureHandler"
                class="com.thesunboy.site.core.security.Certification.MyAuthenticationFailureHandlerImpl">
    </beans:bean>

    <!-- 设置认证过滤器,登入拦截 -->
    <beans:bean id="authenticationFilter" class="com.thesunboy.site.core.security.Certification.AdminAuthenticationFilter">
        <!-- class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"> -->

        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <!--
          <beans:property name="filterProcessesUrl" value="/loginsadasd"></beans:property>   -->
        <beans:property name="authenticationSuccessHandler"
                        ref="myAuthenticationSuccessHandler"></beans:property> <!-- 设置认证成功后置处理器 -->
        <beans:property name="authenticationFailureHandler"
                        ref="myAuthenticationFailureHandler"></beans:property> <!-- 设置认证失败后置处理器 -->

        <beans:property name="rememberMeServices" ref="tokenRememberMeService"></beans:property> <!-- 设置记住我功能的实现 -->

    </beans:bean>

    <beans:bean id="mySecurityMetadataSource" class="com.thesunboy.site.core.security.Accredit.MyFilterInvocationSecurityMetadataSource">

    </beans:bean>

    <!-- url权限拦截器,拦截访问的url,判断当前登录的用户是否有权限访问该url  -->
    <beans:bean id="urlAccessFilter" class="com.thesunboy.site.core.security.Accredit.MyUrlPermissionInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager"/><!-- 用户认证管理器 -->
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManager"/><!--权限访问决策管理器   -->
        <beans:property name="securityMetadataSource" ref="mySecurityMetadataSource"/><!-- 权限资源管理器 -->
    </beans:bean>

    <!-- 	<beans:bean id="permissionEvaluator" class="com.thesunboy.site.core.security.Accredit.MyPermissionEvaluator">

        </beans:bean>
        <beans:bean id="webSecurityExpressionHandler"
            class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
            <beans:property name="permissionEvaluator" ref="permissionEvaluator"></beans:property>
        </beans:bean> -->

</beans:beans> 